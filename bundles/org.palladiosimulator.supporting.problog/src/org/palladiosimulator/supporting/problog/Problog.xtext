// automatically generated by Xtext
grammar org.palladiosimulator.supporting.prolog.probabilistic.Problog
with org.palladiosimulator.supporting.prolog.Prolog

import "http://palladiosimulator.org/supporting/problog/0.1.0" 
 
import "platform:/resource/org.palladiosimulator.supporting.prolog.model/model/prolog.ecore" as prolog
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
 
@Override //necessary?
Program returns prolog::Program:
	clauses+=Clause* 
;

@Override
Clause returns prolog::Clause:
	((ProblogClauseParseRule | TermClause | Predicate) '.') | Comment
;

ProblogClauseParseRule returns prolog::Clause:
	ProbabilisticFact (	({ProbabilisticRule.probabilisticFact=current} (':-' body=Expression_1100_xfy)?) |
						({AnnotatedDisjunctionRule.probablisticFacts+=current} (';' probablisticFacts+=ProbabilisticFact)+ (':-' body=Expression_1100_xfy)?)
	) 
;

ProbabilisticFact: 
	probability=PROBABILITY '::' fact=CompoundTerm
;

terminal PROBABILITY returns ecore::EDouble: '1.0' | '0.'(Prolog::INT)+;

// Variant 2. Works too, but looses distinction of ProblogFact, ProblogRule
// Assumption: Only semantic differentiation, all elements added by ProbLog are covered by the definition of AnnotatedDisjunctionRule:
// AnnotatedDisjunctionRule.facts.size == 1 && AnnotatedDisjunctionRule.body == null -> ProblogFact
// AnnotatedDisjunctionRule.facts.size == 1 && AnnotatedDisjunctionRule.body != null -> ProblogRule
// AnnotatedDisjunctionRule.facts.size > 1 && AnnotatedDisjunctionRule.body == null -> AnnotatedDisjunction
// AnnotatedDisjunctionRule.facts.size > 1 && AnnotatedDisjunctionRule.body != null -> AnnotatedDisjunctionRule
//@Override
//Clause returns prolog::Clause:
//	((AnnotatedDisjunctionRule | TermClause | Predicate) '.') | Comment
//;
//
//AnnotatedDisjunctionRule: 
//	probablisticFacts+=ProbabilisticFact (';' probablisticFacts+=ProbabilisticFact)* (':-' body=Expression_1100_xfy)?
//;
//
//ProbabilisticFact: 
//	probability=PROBABILITY '::' fact=CompoundTerm
//;
//
//terminal PROBABILITY returns ecore::EDouble: '1' | '0.'('0'..'9')+;