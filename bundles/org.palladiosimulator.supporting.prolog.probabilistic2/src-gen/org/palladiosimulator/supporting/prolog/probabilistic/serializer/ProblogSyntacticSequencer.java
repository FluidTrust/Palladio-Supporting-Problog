/*
 * generated by Xtext 2.23.0
 */
package org.palladiosimulator.supporting.prolog.probabilistic.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.palladiosimulator.supporting.prolog.probabilistic.services.ProblogGrammarAccess;

@SuppressWarnings("all")
public class ProblogSyntacticSequencer extends AbstractSyntacticSequencer {

	protected ProblogGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Expression_Primary_LeftParenthesisKeyword_0_0_a;
	protected AbstractElementAlias match_Expression_Primary_LeftParenthesisKeyword_0_0_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (ProblogGrammarAccess) access;
		match_Expression_Primary_LeftParenthesisKeyword_0_0_a = new TokenAlias(true, true, grammarAccess.getExpression_PrimaryAccess().getLeftParenthesisKeyword_0_0());
		match_Expression_Primary_LeftParenthesisKeyword_0_0_p = new TokenAlias(true, false, grammarAccess.getExpression_PrimaryAccess().getLeftParenthesisKeyword_0_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Expression_Primary_LeftParenthesisKeyword_0_0_a.equals(syntax))
				emit_Expression_Primary_LeftParenthesisKeyword_0_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Expression_Primary_LeftParenthesisKeyword_0_0_p.equals(syntax))
				emit_Expression_Primary_LeftParenthesisKeyword_0_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '!' (rule start)
	 *     (rule start) (ambiguity) '+' expr=Expression_200_fy
	 *     (rule start) (ambiguity) '-' expr=Expression_200_fy
	 *     (rule start) (ambiguity) '[' ']' (rule start)
	 *     (rule start) (ambiguity) '[' heads+=Expression_900_fy
	 *     (rule start) (ambiguity) '\' expr=Expression_200_fy
	 *     (rule start) (ambiguity) '\+' expr=Expression_900_fy
	 *     (rule start) (ambiguity) 'fail' (rule start)
	 *     (rule start) (ambiguity) 'false' (rule start)
	 *     (rule start) (ambiguity) 'true' (rule start)
	 *     (rule start) (ambiguity) value=Double
	 *     (rule start) (ambiguity) value=INT
	 *     (rule start) (ambiguity) value=PROLOG_ID
	 *     (rule start) (ambiguity) value=PROLOG_STRING
	 *     (rule start) (ambiguity) {As.left=}
	 *     (rule start) (ambiguity) {BinaryAnd.left=}
	 *     (rule start) (ambiguity) {BinaryOr.left=}
	 *     (rule start) (ambiguity) {BitwiseShiftLeft.left=}
	 *     (rule start) (ambiguity) {Condition.left=}
	 *     (rule start) (ambiguity) {Disequality.left=}
	 *     (rule start) (ambiguity) {Div.left=}
	 *     (rule start) (ambiguity) {Division.left=}
	 *     (rule start) (ambiguity) {EqualOrStandardOrderAfter.left=}
	 *     (rule start) (ambiguity) {EqualOrStandardOrderBefore.left=}
	 *     (rule start) (ambiguity) {Equivalence.left=}
	 *     (rule start) (ambiguity) {GreaterOrEqual.left=}
	 *     (rule start) (ambiguity) {GreaterThan.left=}
	 *     (rule start) (ambiguity) {IntegerDivision.left=}
	 *     (rule start) (ambiguity) {Is.left=}
	 *     (rule start) (ambiguity) {LessOrEqual.left=}
	 *     (rule start) (ambiguity) {LessThan.left=}
	 *     (rule start) (ambiguity) {LogicalAnd.left=}
	 *     (rule start) (ambiguity) {LogicalOr.left=}
	 *     (rule start) (ambiguity) {Minus.left=}
	 *     (rule start) (ambiguity) {Mod.left=}
	 *     (rule start) (ambiguity) {ModuleCall.left=}
	 *     (rule start) (ambiguity) {Multiplication.left=}
	 *     (rule start) (ambiguity) {NonEqualNumber.left=}
	 *     (rule start) (ambiguity) {NotUnifiable.left=}
	 *     (rule start) (ambiguity) {NumberEqual.left=}
	 *     (rule start) (ambiguity) {ParticalUnification.left=}
	 *     (rule start) (ambiguity) {Plus.left=}
	 *     (rule start) (ambiguity) {Power.left=}
	 *     (rule start) (ambiguity) {Rdiv.left=}
	 *     (rule start) (ambiguity) {Rem.left=}
	 *     (rule start) (ambiguity) {SoftCut.left=}
	 *     (rule start) (ambiguity) {StandardOrderAfter.left=}
	 *     (rule start) (ambiguity) {StandardOrderBefore.left=}
	 *     (rule start) (ambiguity) {StructuralEquivalence.left=}
	 *     (rule start) (ambiguity) {StructuralEquivalenceNotProvable.left=}
	 *     (rule start) (ambiguity) {SubDict.left=}
	 *     (rule start) (ambiguity) {Unification.left=}
	 *     (rule start) (ambiguity) {Univ.left=}
	 *     (rule start) (ambiguity) {Xor.left=}
	 */
	protected void emit_Expression_Primary_LeftParenthesisKeyword_0_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '+' expr=Expression_200_fy
	 *     (rule start) (ambiguity) '-' expr=Expression_200_fy
	 *     (rule start) (ambiguity) '\' expr=Expression_200_fy
	 *     (rule start) (ambiguity) '\+' expr=Expression_900_fy
	 *     (rule start) (ambiguity) {As.left=}
	 *     (rule start) (ambiguity) {BinaryAnd.left=}
	 *     (rule start) (ambiguity) {BinaryOr.left=}
	 *     (rule start) (ambiguity) {BitwiseShiftLeft.left=}
	 *     (rule start) (ambiguity) {Condition.left=}
	 *     (rule start) (ambiguity) {Disequality.left=}
	 *     (rule start) (ambiguity) {Div.left=}
	 *     (rule start) (ambiguity) {Division.left=}
	 *     (rule start) (ambiguity) {EqualOrStandardOrderAfter.left=}
	 *     (rule start) (ambiguity) {EqualOrStandardOrderBefore.left=}
	 *     (rule start) (ambiguity) {Equivalence.left=}
	 *     (rule start) (ambiguity) {GreaterOrEqual.left=}
	 *     (rule start) (ambiguity) {GreaterThan.left=}
	 *     (rule start) (ambiguity) {IntegerDivision.left=}
	 *     (rule start) (ambiguity) {Is.left=}
	 *     (rule start) (ambiguity) {LessOrEqual.left=}
	 *     (rule start) (ambiguity) {LessThan.left=}
	 *     (rule start) (ambiguity) {LogicalAnd.left=}
	 *     (rule start) (ambiguity) {LogicalOr.left=}
	 *     (rule start) (ambiguity) {Minus.left=}
	 *     (rule start) (ambiguity) {Mod.left=}
	 *     (rule start) (ambiguity) {ModuleCall.left=}
	 *     (rule start) (ambiguity) {Multiplication.left=}
	 *     (rule start) (ambiguity) {NonEqualNumber.left=}
	 *     (rule start) (ambiguity) {NotUnifiable.left=}
	 *     (rule start) (ambiguity) {NumberEqual.left=}
	 *     (rule start) (ambiguity) {ParticalUnification.left=}
	 *     (rule start) (ambiguity) {Plus.left=}
	 *     (rule start) (ambiguity) {Power.left=}
	 *     (rule start) (ambiguity) {Rdiv.left=}
	 *     (rule start) (ambiguity) {Rem.left=}
	 *     (rule start) (ambiguity) {SoftCut.left=}
	 *     (rule start) (ambiguity) {StandardOrderAfter.left=}
	 *     (rule start) (ambiguity) {StandardOrderBefore.left=}
	 *     (rule start) (ambiguity) {StructuralEquivalence.left=}
	 *     (rule start) (ambiguity) {StructuralEquivalenceNotProvable.left=}
	 *     (rule start) (ambiguity) {SubDict.left=}
	 *     (rule start) (ambiguity) {Unification.left=}
	 *     (rule start) (ambiguity) {Univ.left=}
	 *     (rule start) (ambiguity) {Xor.left=}
	 */
	protected void emit_Expression_Primary_LeftParenthesisKeyword_0_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
